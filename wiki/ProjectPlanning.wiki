#summary Project Planning
@@[Home] -> [ProjectPlanning]

http://ahuman.googlecode.com/svn/images/wiki/research/planning.jpg

<wiki:toc max_depth="2" />
----

= Project Phases / Steps =

A lot is to be done on Wiki, but generally it is in a good shape:

== 1. Create Wiki framework - *done* ==

The most active stage is this one:

== 2. Create team framework and agree on most essential features ==

Phase Goals:
  * Setup stable and transparent (documented) development environment
  * Freeze vision
  * Create exact high-level design, which fits the vision
  * Create component diagram, with one main function per component
  * Choose AI technology set for each of the component
  * Specify component interface

See [aFrameworkRequirements Requirements]

----

Real coding currently can be done for below only:

== 3. Create *aMatter* using existing AI libraries ==

Phase Goals:
  * Demonstrate Cognition/Self-Learning features
  * Demonstrate Feeling Feature
  * Neural networks
  * Markov process/Reinforcement Learning
  * HTM/Belief Networks

See [aToolkitRequirements Requirements]
See [aMatterRequirements Requirements]

----

Until completion of previous steps any activity for below ones should be avoided:

== 4. Create *aChild* ==

Phase Goals:
  * Demonstrate Personality Features
  * Demonstrate Thinking Process
  * Persisting of learned experience
  * Running shared live instance

See [aChildRequirements Requirements]

== 5. Create *aHuman* ==

Phase Goals:
  * Demonstrate Comptence in Specific Area
  * Demonstrate ability to bring value

See [aHumanRequirements Requirements]

----

= Development Approach =

  * Use Time Window / Staged Delivery method - see [DevelopmentCycle]
  * Use free Open Sources tools and libraries

== Current Challenges ==

General:

  * local connections for complex links
  * body links replacement

Physiology:

  * sensors and effectors selection
  * sensors control

Cognition:

  * cortex outputs nature
  * cortex parameters
  * association memory technology
   * a lot of entities
   * time-based links
   * linking distant items
   * multi-hop associations

== Using Third-party Libraries ==

Generally we have below options:
  * don't use a copy of external code to implement 3-d party library functions (not suitable if take into account the complexity of aHuman task)
  * use library code as a reference to understand algorithms and implement the same with required amendments (the way chosen when project has been started)
  * use library as is, in form of committed binaries and headers or as full sources

Last one is the way that looks to me most effective now.
To keep it consistent with our architecture:
  * never use external library API directly, do it only via facade interface
  * support having in the codebase several libraries for the same purpose, e.g. several neural network implementations, and related wrappers in facade to address different coding style and design approaches

== Next Release ==

see [ReleasePlanning]

== Future Features ==

  * [FutureFeatureLocalWatcher Local Watcher]